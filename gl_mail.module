<?php

  module_load_include('inc', 'gl_mail', 'gl_mail.template');
  
  /**
   * gb_maillist will look for the following:
   * 
   * a class named EmailMimeEmail that implements IMultipartMimeEmail
   * 
   * a class named EmailDispatcher that implements IEmailDispatcher
   * 
   * a class named EmailNotifier that implements IEmailNotifier
   * 
   * internal email implementation is irrelevant to gb_maillist
   * 
   * 
   * This implementation uses drupal's built in mail functionality which
   * is an extension on PHP's mail() and the contrib modules
   * MimeMail and Emogrifier.
   */
  
  class EmailMimeEmail implements IMultipartMimeEmail {
    protected $key, $variables;
    protected $headers, $body;
    protected $alt_body = NULL;
    protected $attachments = NULL;
    public $to, $from, $subject, $reply_to;
    
    public function __construct($key, $variables = array()) {
      $this->key = $key;
      $this->variables = $variables;
    }
    
    public function __get($property) {
      if (property_exists($this, $property)) {
        return $this->{$property};
      }
    }
    
    public function __set($property, $value) {
      if (property_exists($this, $property)) {
        $this->{$property} = $value;
      }
    }
    
    public function __isset($property) {
      if (property_exists($this, $property)) {
        return isset($this->{$property});
      }
    }
    
    public function add_header($header, $value) {
      $this->headers[$header] = $value;
    }
    
    public function set_paths($to, $from, $reply_to) {
      $this->to = $to;
      $this->from = $from;
      $this->reply_to = $reply_to;
    }
        
    public function set_subject($subject) {
      $this->subject = $subject;
    }
    
    public function set_body($body) {
      $this->body[] = $body;
    }
    
    public function set_alt_body($body) {
      $this->alt_body = $body;
    }

    public function add_attachment($filename, $filemime) {
      if (!is_readable($filename)) {
        throw new Exception("file {$path} is not accessable / readable");
      }
      
      $this->attachments[] = array(
        'filecontent' => file_get_contents($filename),
        'filename' => basename($filename),
        'filemime' => $filemime,
      );
    }
    
    public function get_headers() {
      return $this->headers;
    }
  }

  /**
   * Interface to dispatch (send) email.
   * 
   * To be implementing by the mailing engine.
   * 
   * @api
   */
  class EmailDispatcher implements IEmailDispatcher {
    const BATCH_THRESHOLD = 10; // Number of e-mail before batching
    
    public $sender, $bounces, $finished, $file;
    
    public function __construct($sender, $bounces, 
        $finished = NULL, $file = NULL) {
      $this->sender = $sender;
      $this->bounces = $bounces;
      $this->finished = $finished;
      $this->file = $file;
    }
        
    /* Insert ourselves into the drush procesing queue */
    private function insert_into_drush_queue() {
      module_load_include('inc', 'g3core', 'g3core.utils');
      module_load_include('inc', 'gl_mail', 'gl_mail.credentials');
      
      // define and create our new database connection
      $dbkey = 'mailq';
      $other_database = array(
        'database' => SQL_DATABASE,
        'username' => SQL_USERNAME,
        'password' => SQL_PASSWORD,
        'host' => SQL_HOSTNAME,
        'driver' => 'mysql',
      );
      Database::addConnectionInfo($dbkey, 'default', $other_database);

      try {

        // switch to new database
        db_set_active($dbkey);
        // insert the domain into the queue
        $result = db_query(
         "INSERT INTO drush_queue (domain) VALUES (:domain)",
          array(':domain'=>g3core_get_domain())
        );

      } catch( Exception $e ) {
        watchdog('gl_mail', 'Error queueing domain for sending: @msg', 
                 array('@msg'=>$e->getMessage()), WATCHDOG_ERROR);
        return FALSE;
      }

      db_set_active(); // back to our default database
 
      return TRUE;
    }

    /* Dispatch using the batch API */
    private function dispatch_multiple_batch(array $emails) {
      // Construct operations in groups of BATCH_THRESHOLD as we know
      // that many can be safely sent 'now'
      $operations = array();
      $offset = 0;
      $total = count($emails);
      while ($total > 0) {
        $slice = array_slice($emails, $offset, self::BATCH_THRESHOLD);
        $operations[] = array('_gl_mail_dispatch', 
            array($this, $slice));
                      
        $total -= self::BATCH_THRESHOLD;
        $offset += self::BATCH_THRESHOLD;
      }

      $batch = array(
        'title' => t('Dispatching e-mail...'),
        'init_message' => t('Sending e-mail.'),
        'progress_message' => t('Processed @current out of @total.'),
        'error_message' => t('An error occurred during processing.'),
        'operations' => $operations,
        'finished' => '_gl_mail_dispatch_finished',
        'file' => drupal_get_path('module', 'gl_mail') . '/gl_mail.batch.inc',
      );
      
      batch_set($batch);
    }
   
    /* Send the e-mail right now */
    private function dispatch_multiple_now(array $emails) {
      $drush = drupal_is_cli() && function_exists('drush_main');
      $count = count($emails);
      if ($count > self::BATCH_THRESHOLD && !$drush) {  // dispatch with batch
        $this->dispatch_multiple_batch($emails);
      } else {                                          // dispatch directly
        $results = array_map(function ($email) {
          $result = self::dispatch($email);
          return array('email' => $email, 'result' => $result);
        }, $emails);
        
        // Call the finished callback if it is present
        if ($this->file) {
          require_once $this->file;
        }

        if ($this->finished) {
          call_user_func($this->finished, $results);
        }
      }
    }

    /* Store the e-mail to send later */
    private function dispatch_multiple_later(array $emails) {
      try {
        // Write the batch records
        $record = array(
          'data' => serialize($this),
        );
        drupal_write_record('gl_mail_batch', $record);
        $bid = $record['bid'];
        
        // Write the jobs
        $query = db_insert('gl_mail_job')->fields(array('bid', 'data'));
        foreach ($emails as $email) {
          $query->values(array('bid' => $bid, 'data' => serialize($email)));
        }
        $query->execute();
      
        // Insert ourselves into the dursh processing queue
        $this->insert_into_drush_queue();
      } catch( Exception $e ) {
        drupal_set_message("Trouble saving mail for sending. Please contact Groupanizer support.", 'error');
        watchdog('gl_mail', "Error saving email for later sending. Exception: @msg",
          array('@msg'=>$e->getMessage()));
      }
    }
    
    /**
     * This method dispatches an e-mail.
     * 
     * @param IEmail $email the e-mail to dispatch
     * 
     * @return boolean
     */
    public function dispatch(IEmail $email) {
      $params = array();
      $params['headers'] = array();
      $params['objects'] = array('email' => $email, 'dispatcher' => $this);
      $params['additional variables'] = $email->variables;
      $lang = language_default();
      $result = drupal_mail('gl_mail', $email->key, $email->to, $lang, 
          $params, $email->from);
      return $result['result'];
    }
    
    /**
     * This method dispatches a group of email (in batch if necessary).
     * 
     * @param array $emails an array of IEmail objects to dispatch.
     * @param string $finished a callback to receive the results of dispatching
     * @param boolean $background whether or not to dispatch in the background
     * 
     * @return nothing
     */
    public function dispatch_multiple(array $emails, $background = FALSE) { 
      if ($background) { // store e-mail to be dispatched later
        $this->dispatch_multiple_later($emails);
      } else {           // dispatch it now
        $this->dispatch_multiple_now($emails);
      }
    }
  }

  /**
   * Implements hook_mail()
   */
  function gl_mail_mail($key, &$message, $params) {
    $objects = $params['objects'];
    if (!empty($objects)) { // This is an e-mail we're dispatching
      $dispatcher = $objects['dispatcher'];
      $email = $objects['email'];
      
      // Allow altering before we copy the data
      drupal_alter('email', $email);
      
      // Set some addtional headers
      $message['params']['headers']['Sender'] = $dispatcher->sender; 
      $message['params']['headers']['Return-Path'] = $dispatcher->bounces;
      $message['params']['headers']['Errors-To'] = $dispatcher->bounces;
      $message['params']['headers']['Reply-To'] = $email->reply_to;
      
      if (!empty($email->headers)) {
        $message['params']['headers'] = array_merge(
            $message['params']['headers'], $email->headers);
      }
      
      $message['subject'] = $email->subject;
      $message['body'] = $email->body;
        
      // If set provide an alternative plaintext body
      if (isset($email->alt_body)) {
        // plaintext body seems to override message['body'] if we're
        // sending a plain text email (message['params']['plaintext'])
        $message['params']['plaintext'] = $email->alt_body;
      }
      
      // If set provide our array of attachment descriptors
      if (isset($email->attachments)) {
        $message['params']['attachments'] = $email->attachments;
      }
      
      /*
      if ($plain)
        $message['params']['plain'] = TRUE; // if set, mimemail treats as plain
        $message['body'] = ??
      }*/
      
      $message['send'] = TRUE;
    }
  }

  /**
   * Implements hook_mail_alter()
   */
  function gl_mail_mail_alter(&$message) {
    //
  }
  
  /**
   * Implements the fake hook_mail_headers_alter()
   */
  function gl_mail_mail_headers_alter(&$headers, &$context) {
    require_once('mail-signature.class.php');
    require_once('mail-signature.config.php');
    
    $options = array(
      'use_dkim' => true,
      'use_domainKeys' => false,
      'identity' => null,
      'dkim_body_canonicalization' => 'relaxed',
      'dk_canonicalization' => 'nofws',
      'signed_headers' => array(
        'mime-version',
        'from',
        'to',
        'subject',
        'reply-to',
      ),
    );
    
    // use the variables if they exist, or fall back to the groupanizer.com files
    $private_key = variable_get('gl_mail_dkim_private_key', MAIL_RSA_PRIV);
    $domain = g3core_get_domain();

    $signature = new mail_signature(
      $private_key,
      MAIL_RSA_PASSPHRASE,
      $domain,
      MAIL_SELECTOR,
      $options
    );
    
    $dkim_headers = $signature->get_signed_headers($context['to'], 
        $context['subject'], $context['body'], $headers);
     
    $headers = $dkim_headers . $headers;        
  }
  
